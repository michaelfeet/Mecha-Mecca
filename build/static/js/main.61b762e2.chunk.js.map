{"version":3,"sources":["components/Header/Header.jsx","components/AddPost/AddPost.jsx","utils/tokenService.js","utils/postApi.js","components/PostCard/PostCard.jsx","components/Loader/Loader.jsx","components/PostGallery/PostGallery.jsx","components/ErrorMessage/ErrorMessage.jsx","pages/Feed/Feed.jsx","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/ProfileBio/ProfileBio.jsx","pages/Profile/Profile.jsx","utils/commentsApi.js","components/CommentList/CommentList.jsx","components/AddComment/AddComment.jsx","pages/Show/Show.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["PageHeader","loggedUser","handleLogout","Segment","clearing","Header","as","floated","to","username","Image","src","photoUrl","avatar","className","onClick","AddPost","props","useState","title","state","setState","selectedFile","setSelectedFile","handleSubmit","e","preventDefault","formData","FormData","append","console","log","forEach","item","handleAddPost","Form","onSubmit","Input","name","value","placeholder","onChange","target","required","Field","type","files","Button","color","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","tokenService","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","create","post","fetch","method","body","headers","then","res","ok","json","response","Error","getAll","Authorization","err","showPost","postId","deletePost","PostCard","isProfile","Card","raised","Content","textAlign","size","Description","wrapped","ui","_id","Loading","Loader","active","PostGallery","posts","numPhotosCol","loading","Group","itemsPerRow","stackable","Dimmer","inverted","reverse","map","ErrorMessage","Message","negative","error","Feed","setPosts","setLoading","setError","a","postsAPI","getPosts","data","message","useEffect","Grid","centered","Row","Column","style","maxWidth","userService","signup","logout","login","creds","Headers","stringify","getUser","getProfile","isPasswordMatch","passwordOne","passwordConf","SignUpPage","handleSignUpOrLogin","passwordError","email","password","navigate","useNavigate","handleChange","key","height","verticalAlign","stacked","LoginPage","width","ProfileBio","columns","vertical","ProfilePage","profileUser","setProfileUser","useParams","comment","CommentList","comments","c","AddComment","handleAddComment","control","TextArea","ShowPage","setPost","id","getOne","postsApi","commentsApi","App","setUser","path","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"iZAKe,SAASA,EAAT,GAAmD,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAG7C,OACI,eAACC,EAAA,EAAD,CAASC,UAAQ,EAAjB,UACI,eAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,QAAxB,UACI,eAAC,IAAD,CAAMC,GAAE,kBAAMP,QAAN,IAAMA,OAAN,EAAMA,EAAYQ,UAA1B,UACI,cAACC,EAAA,EAAD,CACIC,IACc,OAAVV,QAAU,IAAVA,KAAYW,SAAZ,OACMX,QADN,IACMA,OADN,EACMA,EAAYW,SACZ,kEAEVC,QAAM,IAEV,sBAAMC,UAAU,kBAAhB,gBAAmCb,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAYQ,cAEnD,cAAC,IAAD,CAAMD,GAAG,GAAGO,QAASb,EAArB,uBAIJ,cAACG,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,OAAxB,SACI,eAAC,IAAD,CAAMC,GAAG,IAAT,UACI,cAACE,EAAA,EAAD,CAAOC,IAAI,kCAAkCE,QAAM,IACnD,+CAKnB,C,sBC/Bc,SAASG,EAAQC,GAC5B,MAA0BC,mBAAS,CAC/BC,MAAO,KADX,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAaA,SAASC,EAAaC,GAElBA,EAAEC,iBACF,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASP,GACzBK,EAASE,OAAO,QAAST,EAAMD,OAC/BW,QAAQC,IACJJ,EAASK,SAAQ,SAACC,GAAD,OAAUH,QAAQC,IAAIE,EAAtB,KACrBhB,EAAMiB,cAAcP,EACvB,CAED,OACI,cAACxB,EAAA,EAAD,UACI,eAACgC,EAAA,EAAD,CAAMC,SAAUZ,EAAhB,UACI,cAACW,EAAA,EAAKE,MAAN,CACIvB,UAAU,eACVwB,KAAK,QACLC,MAAOnB,EAAMD,MACbqB,YAAY,QACZC,SA9BhB,SAAsBhB,GAClBJ,EAAS,CACLF,MAAOM,EAAEiB,OAAOH,OAEvB,EA2BeI,UAAQ,IAEZ,cAACR,EAAA,EAAKS,MAAN,UACI,cAACT,EAAA,EAAKE,MAAN,CACIQ,KAAK,OACLP,KAAK,QACLE,YAAY,eACZC,SAhCpB,SAAyBhB,GAErBF,EAAgBE,EAAEiB,OAAOI,MAAM,GAClC,MAgCW,cAACC,EAAA,EAAD,CAAQF,KAAK,SAAS/B,UAAU,MAAMkC,MAAM,MAAMjC,QAASS,EAA3D,wBAMf,C,sBC/CD,SAASyB,IACL,IAAIC,EAAQC,aAAaC,QAAQ,SAC7BF,IAGgBG,KAAKC,MAAMC,KAAKL,EAAMM,MAAM,KAAK,KAErCC,IAAMC,KAAKC,MAAQ,MAC3BR,aAAaS,WAAW,SACxBV,EAAQ,OAGhB,OAAOA,CACV,CAWD,IAOeW,EAPM,CACjBC,SAlCJ,SAAkBZ,GACVA,EAEAC,aAAaY,QAAQ,QAASb,GAE9BC,aAAaS,WAAW,QAE/B,EA4BGX,WACAe,YAPJ,WACIb,aAAaS,WAAW,QAC3B,EAMGK,iBAbJ,WACI,IAAMf,EAAQD,IACd,OAAOC,EAAQG,KAAKC,MAAMC,KAAKL,EAAMM,MAAM,KAAK,KAAKU,KAAO,IAC/D,GCzBKC,EAAW,aAEV,SAASC,EAAOC,GACnB,OAAOC,MAAMH,EAAU,CACnBI,OAAQ,OACRC,KAAMH,EACNI,QAAS,CACL,cAAiB,UAAYZ,EAAaZ,cAE/CyB,MAAK,SAACC,GACL,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAM,wDACnB,GACJ,GACJ,CAEM,SAASC,IACZ,OAAOV,MAAMH,EAAU,CACnBM,QAAS,CACLQ,cAAe,UAAYpB,EAAaZ,cAE7CyB,MAAK,SAACC,GACL,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAMD,EAASI,IAC5B,GACJ,GACJ,CAEM,SAASC,EAASC,GACrB,OAAOd,MAAMH,EAAW,IAAMiB,EAAQ,CAClCX,QAAS,CACLQ,cAAe,UAAYpB,EAAaZ,cAE7CyB,MAAK,SAACC,GACL,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAMD,EAASI,IAC5B,GACJ,GACJ,CAEM,SAASG,EAAWD,GACvB,OAAOd,MAAMH,EAAW,IAAMiB,EAAQ,CAClCb,OAAQ,SACRE,QAAS,CACL,eAAgB,mBAChBQ,cAAe,UAAYpB,EAAaZ,cAE7CyB,MAAK,SAACC,GACL,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAMD,EAASI,IAC5B,GACJ,GACJ,CCxDc,SAASI,EAAT,GAAgE,IAA5CjB,EAA2C,EAA3CA,KAAMkB,EAAqC,EAArCA,UAAWtF,EAA0B,EAA1BA,WAAYoF,EAAc,EAAdA,WAG5D,OACI,eAACG,EAAA,EAAD,CAAqBC,QAAM,EAA3B,UACKF,EACG,GAEA,cAACC,EAAA,EAAKE,QAAN,CAAcC,UAAU,OAAxB,SACI,cAACH,EAAA,EAAKnF,OAAN,UACI,eAAC,IAAD,CAAMG,GAAE,WAAM6D,EAAKH,KAAKzD,UAAxB,UACI,cAACC,EAAA,EAAD,CACIkF,KAAK,QACL/E,QAAM,EACNF,IACI0D,EAAKH,KAAKtD,SACJyD,EAAKH,KAAKtD,SACV,oEAGbyD,EAAKH,KAAKzD,gBAM3B,cAAC+E,EAAA,EAAKE,QAAN,CAAcC,UAAU,SAAxB,SACI,cAACH,EAAA,EAAKK,YAAN,UACKxB,EAAKlD,UAGd,cAACT,EAAA,EAAD,CAAOC,IAAG,iBAAK0D,QAAL,IAAKA,OAAL,EAAKA,EAAMzD,UAAYkF,SAAO,EAACC,IAAI,IAE7C,eAACP,EAAA,EAAKE,QAAN,WACA,cAAC,IAAD,CAAMlF,GAAE,gBAAW6D,EAAK2B,KAAxB,SACI,cAACjD,EAAA,EAAD,wBAECsB,EAAKH,KAAKzD,WAAaR,EAAWQ,SAC7B,cAACsC,EAAA,EAAD,CAAQhC,QAAS,kBAAMsE,EAAWhB,EAAK2B,IAAtB,EAAjB,oBACA,QAnCH3B,EAAK2B,IAwCvB,C,aChDc,SAASC,IACpB,OACI,cAACC,EAAA,EAAD,CAAQN,KAAK,QAAQO,QAAM,GAElC,CCDc,SAASC,EAAT,GAA2F,IAApEC,EAAmE,EAAnEA,MAAOC,EAA4D,EAA5DA,aAAcf,EAA8C,EAA9CA,UAAWgB,EAAmC,EAAnCA,QAAStG,EAA0B,EAA1BA,WAAYoF,EAAc,EAAdA,WAEvF,OADJvD,QAAQC,IAAIsE,GAEJ,eAACb,EAAA,EAAKgB,MAAN,CAAYC,YAAaH,EAAcI,WAAS,EAAhD,UACKH,EACG,eAACpG,EAAA,EAAD,WACI,cAACwG,EAAA,EAAD,CAAQR,QAAM,EAACS,UAAQ,EAAvB,SACI,cAAC,EAAD,CAAQhB,KAAK,QAAb,uBAEJ,cAAClF,EAAA,EAAD,CAAOC,IAAI,0EAEf,KACH0F,EAAMQ,UAAUC,KAAI,SAACzC,GAClB,OACI,cAACiB,EAAD,CACIjB,KAAMA,EAENkB,UAAWA,EACXtF,WAAYA,EACZoF,WAAYA,GAHPhB,EAAK2B,IAMrB,MAGZ,C,aC3Bc,SAASe,EAAa9F,GACjC,OACI,cAAC+F,EAAA,EAAD,CAASC,UAAQ,EAAjB,SACI,cAACD,EAAA,EAAQ3G,OAAT,UAAiBY,EAAMiG,SAGlC,CCEc,SAASC,EAAT,GAA6C,IAA7BlH,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aACvC,EAA0BgB,mBAAS,IAAnC,mBAAOmF,EAAP,KAAce,EAAd,KACA,EAA8BlG,oBAAS,GAAvC,mBAAOqF,EAAP,KAAgBc,EAAhB,KACA,EAA0BnG,mBAAS,IAAnC,mBAAOgG,EAAP,KAAcI,EAAd,KAHuD,4CAKvD,WAA6BjD,GAA7B,SAAAkD,EAAA,sEAEQF,GAAW,GAFnB,SAG+BG,EAAgBnD,GAH/C,cAMQoD,IACAJ,GAAW,GAPnB,gDAUQC,EAAS,yCAVjB,0DALuD,+BAmBxCG,IAnBwC,2EAmBvD,4BAAAF,EAAA,+EAE+BC,IAF/B,OAEc1C,EAFd,OAIQsC,EAAS,YAAItC,EAAS4C,OACtBL,GAAW,GALnB,gDAOQvF,QAAQC,IAAI,KAAI4F,QAAS,yBACzBN,GAAW,GARnB,0DAnBuD,kEA+BvD,WAA0BjC,GAA1B,SAAAmC,EAAA,sEAEQF,GAAW,GAFnB,SAG+BG,EAAoBpC,GAHnD,cAIQqC,IACAJ,GAAW,GALnB,gDAOQC,EAAS,oCAPjB,0DA/BuD,sBA8CvD,OAJAM,qBAAU,WACNH,GACH,GAAE,IAECP,EAEI,qCACI,cAAC,EAAD,CAAQjH,WAAYA,EAAYC,aAAcA,IAC9C,cAAC6G,EAAD,CAAcG,MAAOA,IAFzB,OAOJX,EAEI,qCACI,cAAC,EAAD,CAAQtG,WAAYA,EAAYC,aAAcA,IAC9C,cAAC+F,EAAD,OAKR,eAAC4B,EAAA,EAAD,CAAMC,UAAQ,EAAd,UACI,cAACD,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,UACI,cAAC,EAAD,CAAQ/H,WAAYA,EAAYC,aAAcA,QAGtD,cAAC2H,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,SACI,cAAClH,EAAD,CAASkB,cAxE8B,kDA2E/C,cAAC2F,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,SACI,cAAC9B,EAAD,CACIC,MAAOA,EACPC,aAAc,EACdf,WAAW,EACXgB,QAASA,EACTlB,WAlFmC,4CAmFnCpF,WAAYA,UAMnC,C,oBClGKkE,EAAW,cAmEjB,IAQegE,EARK,CAChBC,OA/DJ,SAAgBlE,GACZ,OAAOI,MAAMH,oBAAqB,CAC9BI,OAAQ,OACRC,KAAMN,IAELQ,MAAK,SAAAC,GACF,OAAIA,EAAIC,GAAWD,EAAIE,OAOhBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAMD,EAASI,IAC5B,GACJ,IAEAR,MAAK,gBAAGxB,EAAH,EAAGA,MAAH,OAAeW,EAAaC,SAASZ,EAArC,GAKb,EAwCGmF,OArBJ,WACIxE,EAAaG,aAChB,EAoBGsE,MAlBJ,SAAeC,GACX,OAAOjE,MAAMH,mBAAoB,CAC7BI,OAAQ,OACRE,QAAS,IAAI+D,QAAQ,CAAE,eAAgB,qBACvChE,KAAMnB,KAAKoF,UAAUF,KACtB7D,MAAK,SAAAC,GAEJ,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAMD,EAASI,IAC5B,GACJ,IAAER,MAAK,gBAAGxB,EAAH,EAAGA,MAAH,OAAeW,EAAaC,SAASZ,EAArC,GACX,EAMGwF,QA3BJ,WACI,OAAO7E,EAAaI,kBACvB,EA0BG0E,WAzCJ,SAAoBlI,GAEhB,OAAO6D,MAAMH,EAAW1D,EAAU,CAC9BgE,QAAS,CACLQ,cAAe,UAAYpB,EAAaZ,cAE7CyB,MAAK,SAAAC,GACJ,GAAIA,EAAIC,GAAI,OAAOD,EAAIE,OACvB,MAAM,IAAIE,MAAM,4DACnB,GAEJ,GCpCD,SAAS6D,EAAgBC,EAAaC,GAClC,OAAOD,IAAgBC,CAC1B,CAEc,SAASC,EAAT,GAA8C,IAAxBC,EAAuB,EAAvBA,oBACjC,EAA0B9H,mBAAS,CAC/ByG,QAAS,GACTsB,eAAe,IAFnB,mBAAO/B,EAAP,KAAcI,EAAd,KAIA,EAA0BpG,mBAAS,CAC/BT,SAAU,GACVyI,MAAO,GACPC,SAAU,GACVL,aAAc,KAJlB,mBAAO1H,EAAP,KAAcC,EAAd,KAMA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACM6H,EAAWC,cAEjB,SAASC,EAAa7H,GAClBJ,EAAS,2BACFD,GADC,kBAEHK,EAAEiB,OAAOJ,KAAOb,EAAEiB,OAAOH,QAEjC,CAnBuD,4CAqBxD,WAA4Bd,GAA5B,iBAAA8F,EAAA,yDACI9F,EAAEC,iBACGkH,EAAgBxH,EAAM+H,SAAU/H,EAAM0H,cAF/C,yCAGexB,EAAS,CACZK,QAAS,yBACTsB,eAAe,KAL3B,UAQS3H,EART,yCASegG,EAAS,CACZK,QAAS,mCAVrB,OAmBI,IAAS4B,KANTjC,EAAS,CACLK,QAAS,GACTsB,eAAe,KAEbtH,EAAW,IAAIC,UACZC,OAAO,QAASP,GACTF,EACZO,EAASE,OAAO0H,EAAKnI,EAAMmI,IApBnC,OAsBIzH,QAAQC,IAAIJ,EAASK,SAAQ,SAAAP,GAAC,OAAIK,QAAQC,IAAIN,EAAG,+BAAnB,KAtBlC,oBAwBc0G,EAAYC,OAAOzG,GAxBjC,QAyBQqH,IACAI,EAAS,KA1BjB,mDA4BQtH,QAAQC,IAAR,MACAuF,EAAS,CACLK,QAAS,KAAIA,QACbsB,eAAe,IA/B3B,4DArBwD,sBA8DxD,OACI,cAACpB,EAAA,EAAD,CAAMlC,UAAU,SAASsC,MAAO,CAAEuB,OAAQ,SAAWC,cAAc,SAAnE,SACI,eAAC5B,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,UACI,eAAC7H,EAAA,EAAD,CAAQC,GAAG,KAAK0C,MAAM,MAAM2C,UAAU,SAAtC,UACI,cAACjF,EAAA,EAAD,CAAOC,IAAI,oCADf,sBAGA,eAACwB,EAAA,EAAD,CAAMC,SApEsC,4CAoE5C,UACI,eAACjC,EAAA,EAAD,CAASuJ,SAAO,EAAhB,UACI,cAACvH,EAAA,EAAKE,MAAN,CACIC,KAAK,WACLE,YAAY,WACZD,MAAOnB,EAAMX,SACbgC,SAAU6G,EACV3G,UAAQ,IAEZ,cAACR,EAAA,EAAKE,MAAN,CACIQ,KAAK,QACLP,KAAK,QACLE,YAAY,QACZD,MAAOnB,EAAM8H,MACbzG,SAAU6G,EACV3G,UAAQ,IAEZ,cAACR,EAAA,EAAKE,MAAN,CACI6E,MAAOA,EAAM+B,cACb3G,KAAK,WACLO,KAAK,WACLL,YAAY,WACZD,MAAOnB,EAAM+H,SACb1G,SAAU6G,EACV3G,UAAQ,IAEZ,cAACR,EAAA,EAAKE,MAAN,CACI6E,MAAOA,EAAM+B,cACb3G,KAAK,eACLO,KAAK,WACLL,YAAY,mBACZD,MAAOnB,EAAM0H,aACbrG,SAAU6G,EACV3G,UAAQ,IAEZ,cAACR,EAAA,EAAKS,MAAN,UACI,cAACT,EAAA,EAAKE,MAAN,CACIQ,KAAK,OACLP,KAAK,QACLE,YAAY,eACZC,SAnD5B,SAAyBhB,GACrBK,QAAQC,IAAIN,EAAEiB,OAAOI,MAAO,sBAC5BvB,EAAgBE,EAAEiB,OAAOI,MAAM,GAClC,MAoDmB,cAACC,EAAA,EAAD,CAAQF,KAAK,SAAS/B,UAAU,MAAMkC,MAAM,MAA5C,2BAEHkE,EAAMS,QAAU,cAACZ,EAAD,CAAcG,MAAOA,EAAMS,UAAc,QAE9D,eAACX,EAAA,EAAD,uCAC6B,cAAC,IAAD,CAAMxG,GAAG,SAAT,2BAK5C,C,OC/Hc,SAASmJ,EAAT,GAA6C,IAAxBX,EAAuB,EAAvBA,oBAChC,EAA0B9H,mBAAS,CAC/BgI,MAAO,GACPC,SAAU,KAFd,mBAAO/H,EAAP,KAAcC,EAAd,KAIA,EAA0BH,mBAAS,IAAnC,mBAAOgG,EAAP,KAAcI,EAAd,KACA,SAASgC,EAAa7H,GAClBJ,EAAS,2BACFD,GADC,kBAEHK,EAAEiB,OAAOJ,KAAOb,EAAEiB,OAAOH,QAEjC,CACD,IAAM6G,EAAWC,cAZsC,4CAavD,WAA4B5H,GAA5B,SAAA8F,EAAA,6DACI9F,EAAEC,iBADN,kBAGcyG,EAAYG,MAAMlH,GAHhC,OAIQ4H,IACAI,EAAS,KALjB,gDAOQ9B,EAAS,KAAIK,SAPrB,0DAbuD,sBAuBvD,OACI,cAACE,EAAA,EAAD,CACIlC,UAAU,SACVsC,MAAO,CAAEuB,OAAQ,QAASI,MAAO,SACjCH,cAAc,SAHlB,SAKI,eAAC5B,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,UACI,eAAC7H,EAAA,EAAD,CAAQC,GAAG,KAAK0C,MAAM,MAAM2C,UAAU,SAAtC,UACI,cAACjF,EAAA,EAAD,CAAOC,IAAI,oCADf,aAGA,cAACwB,EAAA,EAAD,CAAMC,SAjCqC,4CAiC3C,SACI,eAACjC,EAAA,EAAD,CAASuJ,SAAO,EAAhB,UACI,cAACvH,EAAA,EAAKE,MAAN,CACIQ,KAAK,QACLP,KAAK,QACLE,YAAY,QACZD,MAAOnB,EAAM8H,MACbzG,SAAU6G,EACV3G,UAAQ,IAEZ,cAACR,EAAA,EAAKE,MAAN,CACIC,KAAK,WACLO,KAAK,WACLL,YAAY,WACZD,MAAOnB,EAAM+H,SACb1G,SAAU6G,EACV3G,UAAQ,IAEZ,cAACI,EAAA,EAAD,CAAQF,KAAK,SAAS/B,UAAU,MAAMkC,MAAM,MAA5C,wBAGR,eAACgE,EAAA,EAAD,yBACe,cAAC,IAAD,CAAMxG,GAAG,UAAT,wBAEd0G,EAAQ,cAACH,EAAD,CAAcG,MAAOA,IAAY,SAIzD,CC1Cc2C,MAvBf,YAA+B,IAAT3F,EAAQ,EAARA,KAClB,OACI,cAAC2D,EAAA,EAAD,CAAMlC,UAAU,SAASmE,QAAS,EAAlC,SACI,eAACjC,EAAA,EAAKE,IAAN,WACI,cAACF,EAAA,EAAKG,OAAN,UACI,cAACtH,EAAA,EAAD,CAAOC,IAAG,UACC,OAAJuD,QAAI,IAAJA,KAAMtD,SAAN,OACGsD,QADH,IACGA,OADH,EACGA,EAAMtD,SACN,kEAHA,KAINC,QAAM,EACN+E,KAAK,WAEb,cAACiC,EAAA,EAAKG,OAAN,CAAarC,UAAU,OAAOsC,MAAO,CAAEC,SAAU,KAAjD,SACI,cAAC/H,EAAA,EAAD,CAAS4J,UAAQ,EAAjB,SACI,6BAAK7F,EAAKzD,mBAOjC,ECVc,SAASuJ,EAAT,GAAoD,IAA7B/J,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAC9C,EAA0BgB,mBAAS,IAAnC,mBAAOmF,EAAP,KAAce,EAAd,KACA,EAAsClG,mBAAS,CAAC,GAAhD,mBAAO+I,EAAP,KAAoBC,EAApB,KACA,EAA8BhJ,oBAAS,GAAvC,mBAAOqF,EAAP,KAAgBc,EAAhB,KACA,EAA0BnG,mBAAS,IAAnC,mBAAOgG,EAAP,KAAcI,EAAd,KAEQ7G,EAAa0J,cAAb1J,SANsD,SAQ/CkI,IAR+C,2EAQ9D,4BAAApB,EAAA,+EAE+BY,EAAYQ,WAAWlI,GAFtD,OAEcqE,EAFd,OAGQhD,QAAQC,IAAI+C,EAAU,mBACtBuC,GAAW,GACX6C,EAAepF,EAAS4C,KAAKxD,MAC7BkD,EAAStC,EAAS4C,KAAKrB,OAN/B,kDAQQvE,QAAQC,IAAI,KAAI4F,QAAS,yBACzBL,EAAS,mEATjB,2DAR8D,kEAyB9D,WAA0BlC,GAA1B,SAAAmC,EAAA,sEAEQF,GAAW,GAFnB,SAG+BG,EAAoBpC,GAHnD,cAIQuD,IACAtB,GAAW,GALnB,gDAOQC,EAAS,oCAPjB,0DAzB8D,sBAoC9D,OAfAM,qBAAU,WACNe,GACH,GAAE,CAAClI,IAaAyG,EAEI,qCACI,cAAC,EAAD,CAAQjH,WAAYA,EAAYC,aAAcA,IAC9C,cAAC6G,EAAD,CAAcG,MAAOA,OAK7BX,EAEI,qCACI,cAAC,EAAD,CAAQtG,WAAYA,EAAYC,aAAcA,IAC9C,cAAC+F,EAAD,OAOR,eAAC4B,EAAA,EAAD,WACI,cAACA,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,UACI,cAAC,EAAD,CAAQ/H,WAAYA,EAAYC,aAAcA,QAGtD,cAAC2H,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,UACI,cAAC,EAAD,CAAY9D,KAAM+F,QAG1B,cAACpC,EAAA,EAAKE,IAAN,CAAUD,UAAQ,EAAlB,SACI,cAACD,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,SACI,cAAC9B,EAAD,CAAaC,MAAOA,EAChBC,aAAc,EACdf,WAAW,EACXgB,QAASA,EACTtG,WAAYA,EACZoF,WA1E0C,oDAgFjE,C,WC5FKlB,EAAW,gBAEV,SAASC,EAAOgG,GAEnB,OADAtI,QAAQC,IAAIqI,EAAS,eACd9F,MAAMH,EAAU,CACnBI,OAAQ,OACRC,KAAMnB,KAAKoF,UAAU2B,GACrB3F,QAAS,IAAI+D,QAAQ,CACjB,eAAgB,mBAChBvD,cAAe,UAAYpB,EAAaZ,eAE7CyB,MAAK,SAACC,GACL,OAAIA,EAAIC,GAAWD,EAAIE,OAChBF,EAAIE,OAAOH,MAAK,SAAAI,GAEnB,MADAhD,QAAQC,IAAI+C,GACN,IAAIC,MAAM,wDACnB,GACJ,GACJ,CCLc,SAASsF,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAgClC,OAAQA,EACJ,mCACI,8BACI,oBAAIxJ,UAAW,OAAf,SAAwBwJ,EAASxD,KAAI,SAAAyD,GACjC,OACI,mCACI,qBAAIzJ,UAAU,WAAd,UAEI,+BAAOyJ,EAAEH,UACT,uCAAUG,EAAErG,YAM3B,UAfM,IAmBtB,C,aC/Dc,SAASsG,EAAT,GAAiD,IAA5BpF,EAA2B,EAA3BA,OAAQqF,EAAmB,EAAnBA,iBACxC,EAA0BvJ,mBAAS,CAC/BkJ,QAAS,KADb,mBAAOhJ,EAAP,KAAcC,EAAd,KAWA,SAASG,EAAaC,GAClBA,EAAEC,iBACF+I,EAAiB,CACbL,QAAShJ,EAAMgJ,QACfhF,OAAQA,GAEf,CAID,OAlBAtD,QAAQC,IAAIqD,GAmBR,cAACjF,EAAA,EAAD,UACI,eAACgC,EAAA,EAAD,CAAMC,SAAUZ,EAAhB,UACI,cAACW,EAAA,EAAKS,MAAN,CACI8H,QAASC,IACT7J,UAAU,eACVwB,KAAK,UACLC,MAAOnB,EAAMgJ,QACb5H,YAAY,cACZC,SA1BhB,SAAsBhB,GAClBJ,EAAS,2BACFD,GADC,IAEJgJ,QAAS3I,EAAEiB,OAAOH,QAEzB,EAsBeI,UAAQ,IAEZ,cAACI,EAAA,EAAD,CAAQF,KAAK,SAAS/B,UAAU,MAAMkC,MAAM,MAAMjC,QAASS,EAA3D,wBAIf,CChBc,SAASoJ,EAAT,GAAiD,IAA7B3K,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aAC3C,EAAwBgB,mBAAS,CAAC,GAAlC,mBAAOmD,EAAP,KAAawG,EAAb,KACQC,EAAOX,cAAPW,GAFmD,SAI5CC,IAJ4C,2EAI3D,4BAAAxD,EAAA,+EAE+ByD,EAAkBF,GAFjD,OAEchG,EAFd,OAGQhD,QAAQC,IAAI+C,EAAU,WACtB+F,EAAQ/F,EAAS4C,MAJzB,gDAOQ5F,QAAQC,IAAI,KAAI4F,QAAS,yBAPjC,0DAJ2D,kEAmB3D,WAAgCyC,GAAhC,SAAA7C,EAAA,+EAE+B0D,EAAmBb,GAFlD,cAGQW,IAHR,gDAKQjJ,QAAQC,IAAI,KAAI4F,QAAS,uBALjC,0DAnB2D,sBA4B3D,OAbAC,qBAAU,WACNmD,GACH,GAAE,IAuBC,cAXA,CAWClD,EAAA,EAAD,CAAMlC,UAAU,SAASmE,QAAS,EAAlC,UACI,cAACjC,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,UACI,cAAC,EAAD,CAAQ/H,WAAYA,EAAYC,aAAcA,QAGtD,cAAC2H,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,UACI,6BAAK3D,EAAKlD,YAGlB,cAAC0G,EAAA,EAAKE,IAAN,UACI,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,SACI,cAACxH,EAAA,EAAD,CAAOI,UAAU,QAAQH,IAAK0D,EAAKzD,eAG3C,eAACiH,EAAA,EAAKE,IAAN,WACI,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,CAAEC,SAAU,KAAhC,SACI,cAACsC,EAAD,CAAYpF,OAAQf,EAAK2B,IAAKyE,iBA1Da,gDA4D/C,cAAC5C,EAAA,EAAKG,OAAN,UACI,cAACqC,EAAD,CAAavJ,UAAW,OAAQwJ,SAAUjG,EAAKiG,kBAKlE,CClCcY,MA5Cf,WACI,MAAwBhK,mBAASiH,EAAYO,WAA7C,mBAAOxE,EAAP,KAAaiH,EAAb,KAIA,SAASnC,IACLmC,EAAQhD,EAAYO,UACvB,CAED,SAASxI,IACLiI,EAAYE,SACZ8C,EAAQ,KACX,CAGD,OAAIjH,EAGI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOkH,KAAK,IAAIC,QAAS,cAAClE,EAAD,CAAMlH,WAAYiE,EAAMhE,aAAcA,MAC/D,cAAC,IAAD,CAAOkL,KAAK,SAASC,QAAS,cAAC,EAAD,CAAWrC,oBAAqBA,MAC9D,cAAC,IAAD,CAAOoC,KAAK,UAAUC,QAAS,cAAC,EAAD,CAAYrC,oBAAqBA,MAChE,cAAC,IAAD,CAAOoC,KAAK,aAAaC,QAAS,cAACrB,EAAD,CAAc/J,WAAYiE,EAAMhE,aAAcA,MAChF,cAAC,IAAD,CAAOkL,KAAK,YAAYC,QAAS,cAAC,EAAD,CAAMpL,WAAYiE,EAAMhE,aAAcA,SAO/E,cADA,CACC,IAAD,WACI,cAAC,IAAD,CACIkL,KAAK,SACLC,QAAS,cAAC,EAAD,CAAWrC,oBAAqBA,MAE7C,cAAC,IAAD,CACIoC,KAAK,UACLC,QAAS,cAAC,EAAD,CAAYrC,oBAAqBA,MAE9C,cAAC,IAAD,CAAOoC,KAAK,KAAKC,QAAS,cAAC,IAAD,CAAU7K,GAAG,gBAGlD,EC3CmB8K,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVRC,IAASC,OACL,cAAC,IAAD,UAAQ,cAAC,EAAD,MACRC,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBvH,MAAK,SAAAwH,GACFA,EAAaC,YAChB,IACAC,OAAM,SAAAlF,GACHpF,QAAQoF,MAAMA,EAAMS,QACvB,G","file":"static/js/main.61b762e2.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\nimport { Header, Segment, Image } from 'semantic-ui-react';\nimport './Header.css'\n\nexport default function PageHeader({ loggedUser, handleLogout }) {\n    // console.log(loggedUser, '<<< loggedUser in header')\n    // console.log(loggedUser)\n    return (\n        <Segment clearing>\n            <Header as=\"h2\" floated=\"right\">\n                <Link to={`/${loggedUser?.username}`}>\n                    <Image\n                        src={\n                            loggedUser?.photoUrl\n                                ? loggedUser?.photoUrl\n                                : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"\n                        }\n                        avatar\n                    ></Image>\n                    <span className=\"header-username\">{loggedUser?.username}</span>\n                </Link>\n                <Link to=\"\" onClick={handleLogout}>\n                    Logout\n                </Link>\n            </Header>\n            <Header as=\"h2\" floated=\"left\">\n                <Link to=\"/\">\n                    <Image src='https://i.imgur.com/TAtWfEl.png' avatar></Image>\n                    <span>Home</span>\n                </Link>\n            </Header>\n        </Segment>\n    )\n}","import React, { useState } from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\n\nexport default function AddPost(props) {\n    const [state, setState] = useState({\n        title: ''\n    })\n    const [selectedFile, setSelectedFile] = useState('');\n\n    function handleChange(e) {\n        setState({\n            title: e.target.value\n        });\n    }\n\n    function handleFileInput(e) {\n        // console.log(e.target.files, 'e.target.files');\n        setSelectedFile(e.target.files[0]);\n    }\n\n    function handleSubmit(e) {\n        \n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('photo', selectedFile);\n        formData.append('title', state.title);\n        console.log(\n            formData.forEach((item) => console.log(item)))\n        props.handleAddPost(formData); // formData is the data we want to send to the server!\n    }\n\n    return (\n        <Segment>\n            <Form onSubmit={handleSubmit}>\n                <Form.Input\n                    className=\"form-control\"\n                    name=\"title\"\n                    value={state.title}\n                    placeholder=\"Title\"\n                    onChange={handleChange}\n                    required\n                />\n                <Form.Field>\n                    <Form.Input\n                        type=\"file\"\n                        name=\"photo\"\n                        placeholder=\"upload image\"\n                        onChange={handleFileInput}\n                    />\n                </Form.Field>\n                <Button type=\"submit\" className=\"btn\" color=\"red\" onClick={handleSubmit}>Submit</Button>\n            </Form>\n        </Segment>\n\n\n    )\n}","function setToken(token) {\n    if (token) {\n        // localStorage is given to us by the browser\n        localStorage.setItem('token', token);\n    } else {\n        localStorage.removeItem('token');\n    }\n}\n\nfunction getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n        // Check if expired, remove if it is\n        // atob is a function that decodes a base-64 string\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        // JWT's exp is expressed in seconds, not milliseconds, so convert\n        if (payload.exp < Date.now() / 1000) {\n            localStorage.removeItem('token');\n            token = null;\n        }\n    }\n    return token;\n}\n\nfunction getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction removeToken() {\n    localStorage.removeItem('token');\n}\n\nconst tokenService = {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n};\n\nexport default tokenService;","import tokenService from \"./tokenService\";\n\nconst BASE_URL = \"/api/posts\";\n\nexport function create(post) {\n    return fetch(BASE_URL, {\n        method: \"POST\",\n        body: post,\n        headers: {\n            'Authorization': \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response)\n            throw new Error('Bad Credentials, Check server terminal for more info.');\n        });\n    });\n}\n\nexport function getAll() {\n    return fetch(BASE_URL, {\n        headers: {\n            Authorization: 'Bearer ' + tokenService.getToken()\n        }\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response);\n            throw new Error(response.err);\n        });\n    });\n}\n\nexport function showPost(postId) {\n    return fetch(BASE_URL + '/' + postId, {\n        headers: {\n            Authorization: 'Bearer ' + tokenService.getToken()\n        }\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response)\n            throw new Error(response.err);\n        });\n    });\n}\n\nexport function deletePost(postId) {\n    return fetch(BASE_URL + '/' + postId, {\n        method: \"DELETE\",\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response)\n            throw new Error(response.err)\n        })\n    });\n}","import React from 'react';\nimport { Card, Image, Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom'\n\nimport * as postApi from '../../utils/postApi'\n\nexport default function PostCard({ post, isProfile, loggedUser, deletePost }) {\n\n\n    return (\n        <Card key={post._id} raised>\n            {isProfile ? (\n                ''\n            ) : (\n                <Card.Content textAlign='left'>\n                    <Card.Header>\n                        <Link to={`/${post.user.username}`}>\n                            <Image\n                                size='large'\n                                avatar\n                                src={\n                                    post.user.photoUrl\n                                        ? post.user.photoUrl\n                                        : 'https://react.semantic-ui.com/images/wireframe/square-image.png'\n                                }\n                            />\n                            {post.user.username}\n                        </Link>\n                    </Card.Header>\n                </Card.Content>\n            )}\n            \n            <Card.Content textAlign='center'>\n                <Card.Description>\n                    {post.title}\n                </Card.Description>\n            </Card.Content>\n            <Image src={`${post?.photoUrl}`} wrapped ui={false} />\n            \n            <Card.Content>\n            <Link to={`/post/${post._id}`}>\n                <Button>Details</Button>\n            </Link>\n                {post.user.username === loggedUser.username\n                    ? <Button onClick={() => deletePost(post._id)}>Delete</Button>\n                    : ''\n                }\n            </Card.Content>\n        </Card>\n    )\n}","import { Loader } from 'semantic-ui-react'\n\nexport default function Loading() {\n    return (\n        <Loader size=\"small\" active></Loader>\n    );\n}","import React from 'react';\nimport { Card, Dimmer, Segment, Image } from 'semantic-ui-react';\nimport PostCard from '../PostCard/PostCard';\nimport Loader from '../Loader/Loader'\n\nexport default function PostGallery({ posts, numPhotosCol, isProfile, loading, loggedUser, deletePost }) {\nconsole.log(posts)\n    return (\n        <Card.Group itemsPerRow={numPhotosCol} stackable>\n            {loading ? (\n                <Segment>\n                    <Dimmer active inverted>\n                        <Loader size=\"small\">Loading</Loader>\n                    </Dimmer>\n                    <Image src=\"https://react.semantic-ui.com/images/wireframe/short-paragraph.png\" />\n                </Segment>\n            ) : null}\n            {posts.reverse().map((post) => {\n                return (\n                    <PostCard\n                        post={post}\n                        key={post._id}\n                        isProfile={isProfile}\n                        loggedUser={loggedUser}\n                        deletePost={deletePost}\n                    />\n                );\n            })}\n        </Card.Group>\n    );\n}","import React from 'react';\nimport {Message} from 'semantic-ui-react'\n\nexport default function ErrorMessage(props) {\n    return (\n        <Message negative>\n            <Message.Header>{props.error}</Message.Header>\n        </Message>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport Header from '../../components/Header/Header';\nimport AddPost from '../../components/AddPost/AddPost';\nimport PostGallery from '../../components/PostGallery/PostGallery';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport Loading from \"../../components/Loader/Loader\";\n\nimport * as postsAPI from '../../utils/postApi';\n\nexport default function Feed({ loggedUser, handleLogout }) {\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    async function handleAddPost(post) {\n        try {\n            setLoading(true);\n            const response = await postsAPI.create(post);\n            // console.log(response);\n            // setPosts([response.data, ...posts]);\n            getPosts();\n            setLoading(false);\n        } catch (err) {\n            // console.log(err.message, 'error creating post');\n            setError(\"Error creating post, please try again\");\n        }\n    }\n\n    async function getPosts() {\n        try {\n            const response = await postsAPI.getAll();\n            // console.log(response, '<<<Data');\n            setPosts([...response.data]);\n            setLoading(false);\n        } catch (err) {\n            console.log(err.message, '<<< This is the error');\n            setLoading(false);\n        }\n    }\n\n    async function deletePost(postId){\n        try{\n            setLoading(true);\n            const response = await postsAPI.deletePost(postId);\n            getPosts();\n            setLoading(false);\n        } catch(err){\n            setError(\"Error deleting posts, try again.\")\n        }\n    }\n\n    useEffect(() => {\n        getPosts();\n    }, [])\n\n    if (error) {\n        return (\n            <>\n                <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                <ErrorMessage error={error} />;\n            </>\n        );\n    }\n\n    if (loading) {\n        return (\n            <>\n                <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                <Loading />\n            </>\n        );\n    }\n    return (\n        <Grid centered>\n            <Grid.Row>\n                <Grid.Column>\n                    <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <AddPost handleAddPost={handleAddPost} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <PostGallery\n                        posts={posts}\n                        numPhotosCol={1}\n                        isProfile={false}\n                        loading={loading}\n                        deletePost={deletePost}\n                        loggedUser={loggedUser}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n    return fetch(BASE_URL + 'signup', {\n        method: 'POST',\n        body: user // this is assuming you are sending multipart- formdata request. aka uploading a photo.\n    })\n        .then(res => {\n            if (res.ok) return res.json();\n            // Probably a duplicate email\n\n            // Writing your error handling like this allows you to throw the error response \n            // to the catch block where signup occurs,  \n\n            //     res.status(400).json({ err: \"Something went wrong\" }); notice err, and response.err match\n            return res.json().then(response => {\n                console.log(response)\n                throw new Error(response.err)\n            })\n        })\n        // Parameter destructuring!\n        .then(({ token }) => tokenService.setToken(token));\n    // Setting our token in localStorage in our browser\n    // then we'll be able to use with every request!\n    // The above could have been written as\n    //.then((token) => token.token);\n}\n\nfunction getProfile(username) {\n    // console.log(username, 'username over here')\n    return fetch(BASE_URL + username, {\n        headers: {\n            Authorization: 'Bearer ' + tokenService.getToken()\n        }\n    }).then(res => {\n        if (res.ok) return res.json();\n        throw new Error('error from getProfile request. check the server terminal.');\n    });\n    // return tokenService.getUserFromToken();\n}\n\nfunction getUser() {\n    return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n    tokenService.removeToken();\n}\n\nfunction login(creds) {\n    return fetch(BASE_URL + 'login', {\n        method: 'POST',\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n        body: JSON.stringify(creds)\n    }).then(res => {\n        // Valid login if we have a status of 2xx (res.ok)\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response)\n            throw new Error(response.err)\n        })\n    }).then(({ token }) => tokenService.setToken(token));\n}\n\nconst userService = {\n    signup,\n    logout,\n    login,\n    getUser,\n    getProfile\n};\n\nexport default userService","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { Button, Form, Grid, Header, Image, Segment, Message } from 'semantic-ui-react';\n\n\n\nfunction isPasswordMatch(passwordOne, passwordConf) {\n    return passwordOne === passwordConf;\n}\n\nexport default function SignUpPage({ handleSignUpOrLogin }) {\n    const [error, setError] = useState({\n        message: '',\n        passwordError: false\n    });\n    const [state, setState] = useState({\n        username: '',\n        email: '',\n        password: '',\n        passwordConf: ''\n    });\n    const [selectedFile, setSelectedFile] = useState('');\n    const navigate = useNavigate();\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        if (!isPasswordMatch(state.password, state.passwordConf)) {\n            return setError({\n                message: 'Passwords Do Not Match',\n                passwordError: true\n            });\n        }\n        if (!selectedFile) {\n            return setError({\n                message: 'Please Upload A Profile Image'\n            });\n        }\n        setError({\n            message: '',\n            passwordError: false\n        });\n        const formData = new FormData();\n        formData.append('photo', selectedFile);\n        for (let key in state) {\n            formData.append(key, state[key]);\n        }\n        console.log(formData.forEach(e => console.log(e, '<<< Each element in formData')));\n        try {\n            await userService.signup(formData);\n            handleSignUpOrLogin();\n            navigate('/');\n        } catch (err) {\n            console.log(err);\n            setError({\n                message: err.message,\n                passwordError: false\n            });\n        }\n    }\n\n    function handleFileInput(e) {\n        console.log(e.target.files, '<<< e.target.files');\n        setSelectedFile(e.target.files[0]);\n    }\n\n    return (\n        <Grid textAlign=\"center\" style={{ height: \"100vh\" }} verticalAlign=\"middle\">\n            <Grid.Column style={{ maxWidth: 450 }}>\n                <Header as=\"h2\" color=\"red\" textAlign=\"center\">\n                    <Image src=\"https://i.imgur.com/TAtWfEl.png\" />Join Mecha Mecca\n                </Header>\n                <Form onSubmit={handleSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            name=\"username\"\n                            placeholder=\"username\"\n                            value={state.username}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"email\"\n                            value={state.email}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            error={error.passwordError}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"password\"\n                            value={state.password}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            error={error.passwordError}\n                            name=\"passwordConf\"\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            value={state.passwordConf}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Field>\n                            <Form.Input\n                                type=\"file\"\n                                name=\"photo\"\n                                placeholder=\"upload image\"\n                                onChange={handleFileInput}\n                                \n                            />\n                        </Form.Field>\n                        <Button type=\"submit\" className=\"btn\" color=\"red\">Join Now! </Button>\n                    </Segment>\n                    {error.message ? <ErrorMessage error={error.message} /> : null}\n                </Form>\n                <Message>\n                    Already have an account? <Link to=\"/login\">Log In</Link>\n                </Message>\n            </Grid.Column>\n        </Grid>\n    );\n}\n","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react';\n\nexport default function LoginPage({ handleSignUpOrLogin }) {\n    const [state, setState] = useState({\n        email: '',\n        password: ''\n    });\n    const [error, setError] = useState('');\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        });\n    }\n    const navigate = useNavigate();\n    async function handleSubmit(e) {\n        e.preventDefault();\n        try {\n            await userService.login(state);\n            handleSignUpOrLogin();\n            navigate('/');\n        } catch (err) {\n            setError(err.message);\n        }\n    }\n    return (\n        <Grid\n            textAlign=\"center\"\n            style={{ height: \"100vh\", width: \"100vw\" }}\n            verticalAlign=\"middle\"\n        >\n            <Grid.Column style={{ maxWidth: 450 }}>\n                <Header as=\"h2\" color=\"red\" textAlign=\"center\">\n                    <Image src=\"https://i.imgur.com/TAtWfEl.png\" /> Log In\n                </Header>\n                <Form onSubmit={handleSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"email\"\n                            value={state.email}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"password\"\n                            value={state.password}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Button type=\"submit\" className=\"btn\" color=\"red\">Login</Button>\n                    </Segment>\n                </Form>\n                <Message>\n                    New to us? <Link to=\"/signup\">Sign Up</Link>\n                </Message>\n                {error ? <ErrorMessage error={error} /> : null}\n            </Grid.Column>\n        </Grid>\n    );\n}\n","import { Image, Grid, Segment } from 'semantic-ui-react';\n\n\nfunction ProfileBio({ user }) {\n    return (\n        <Grid textAlign='center' columns={2}>\n            <Grid.Row>\n                <Grid.Column>\n                    <Image src={\n                        `${user?.photoUrl\n                            ? user?.photoUrl\n                            : \"https://react.semantic-ui.com/images/wireframe/square-image.png\"} `}\n                        avatar\n                        size='tiny' />\n                </Grid.Column>\n                <Grid.Column textAlign=\"left\" style={{ maxWidth: 450 }}>\n                    <Segment vertical>\n                        <h3>{user.username}</h3>\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n\n    );\n}\n\nexport default ProfileBio;","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\n\nimport Header from '../../components/Header/Header';\nimport ProfileBio from \"../../components/ProfileBio/ProfileBio\";\nimport PostGallery from \"../../components/PostGallery/PostGallery\";\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport Loading from '../../components/Loader/Loader'\n\nimport userService from '../../utils/userService';\nimport * as postsAPI from '../../utils/postApi';\n\n\nexport default function ProfilePage({ loggedUser, handleLogout }) {\n    const [posts, setPosts] = useState([]);\n    const [profileUser, setProfileUser] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n\n    const { username } = useParams();\n\n    async function getProfile() {\n        try {\n            const response = await userService.getProfile(username);\n            console.log(response, '<<<user\\'s posts');\n            setLoading(false);\n            setProfileUser(response.data.user);\n            setPosts(response.data.posts);\n        } catch (err) {\n            console.log(err.message, 'profile>profilePage()');\n            setError('These are not the droids you\\'re looking for. Profile not found.');\n        }\n    }\n\n    useEffect(() => {\n        getProfile();\n    }, [username]);\n\n    async function deletePost(postId){\n        try{\n            setLoading(true);\n            const response = await postsAPI.deletePost(postId);\n            getProfile();\n            setLoading(false);\n        } catch(err){\n            setError(\"Error deleting posts, try again.\")\n        }\n    }\n\n    if (error) {\n        return (\n            <>\n                <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                <ErrorMessage error={error} />\n            </>\n        )\n    }\n\n    if (loading) {\n        return (\n            <>\n                <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                <Loading />\n            </>\n        )\n    }\n\n\n    return (\n        <Grid>\n            <Grid.Row>\n                <Grid.Column>\n                    <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column>\n                    <ProfileBio user={profileUser} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered>\n                <Grid.Column style={{ maxWidth: 750 }}>\n                    <PostGallery posts={posts}\n                        numPhotosCol={3}\n                        isProfile={true}\n                        loading={loading}\n                        loggedUser={loggedUser}\n                        deletePost={deletePost}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}","import tokenService from \"./tokenService\";\n\nconst BASE_URL = \"/api/comments\";\n\nexport function create(comment) {\n    console.log(comment, 'commentdata')\n    return fetch(BASE_URL, {\n        method: \"POST\",\n        body: JSON.stringify(comment),\n        headers: new Headers({\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        }),\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response)\n            throw new Error('Bad Credentials, Check server terminal for more info.');\n        });\n    });\n}\n\nexport function getAll(postId) {\n    return fetch(BASE_URL + '/' + postId, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Bearer ' + tokenService.getToken()\n        }\n    }).then((res) => {\n        if (res.ok) return res.json();\n        return res.json().then(response => {\n            console.log(response);\n            throw new Error(response.err);\n        });\n    });\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\n\nimport Header from '../../components/Header/Header';\nimport ProfileBio from \"../../components/ProfileBio/ProfileBio\";\nimport PostGallery from \"../../components/PostGallery/PostGallery\";\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport Loading from '../../components/Loader/Loader'\n\nimport userService from '../../utils/userService';\n\nimport * as commentsApi from '../../utils/commentsApi';\n\n\nexport default function CommentList({ comments }) {\n\n    // const [posts, setPosts] = useState([]);\n    // const [profileUser, setProfileUser] = useState({});\n    // const [loading, setLoading] = useState(true);\n    // const [error, setError] = useState('');\n\n    // const { username } = useParams();\n\n    // const [comments, setComments] = useState([]);\n\n\n    // async function getComment() {\n\n    //     try {\n    //         console.log(postId, 'psot id')\n    //         const response = await commentsApi.getAll();\n    //         console.log(response, '<<<user\\'s posts');\n    //         setLoading(false);\n    //         setProfileUser(response.data.user);\n    //         setComments(response.data.comments);\n    //     } catch (err) {\n    //         console.log(err.message);\n    //         setError('These are not the droids you\\'re looking for. Profile not found.');\n    //     }\n    // }\n\n\n    // useEffect(() => {\n    //     getComment();\n    // }, [username]);\n\n    return !comments ? null : (\n        <>\n            <div>\n                <ul className={'list'}>{comments.map(c => {\n                    return (\n                        <>\n                            <li className='listItem'>\n                                \n                                <span>{c.comment}</span>\n                                <span> - {c.user}</span>\n                            </li>\n\n                        </>\n\n                    )\n                })}</ul>\n            </div>\n        </>\n    )\n}","import React, { useState } from 'react';\nimport { Button, Form, Segment, TextArea } from 'semantic-ui-react';\n\nexport default function AddComment({postId, handleAddComment}) {\n    const [state, setState] = useState({\n        comment: ''\n    })\n    console.log(postId)\n    function handleChange(e) {\n        setState({\n            ...state,\n            comment: e.target.value\n        });\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        handleAddComment({\n            comment: state.comment,\n            postId: postId\n        });\n    }\n\n\n\n    return (\n        <Segment>\n            <Form onSubmit={handleSubmit}>\n                <Form.Field\n                    control={TextArea}\n                    className=\"form-control\"\n                    name=\"comment\"\n                    value={state.comment}\n                    placeholder=\"Add Comment\"\n                    onChange={handleChange}\n                    required\n                />\n                <Button type=\"submit\" className=\"btn\" color=\"red\" onClick={handleSubmit}>Submit</Button>\n            </Form>\n        </Segment>\n    )\n}","// header\n// specific post\n// comment form\n// comment list\n// delete button build here\n\nimport React from 'react';\nimport './Show.css';\nimport Header from '../../components/Header/Header';\nimport ProfileBio from \"../../components/ProfileBio/ProfileBio\";\nimport PostGallery from \"../../components/PostGallery/PostGallery\";\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport Loading from '../../components/Loader/Loader';\nimport CommentList from '../../components/CommentList/CommentList';\nimport AddComment from '../../components/AddComment/AddComment'\n\nimport * as postsApi from '../../utils/postApi'\nimport * as commentsApi from '../../utils/commentsApi'\n\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { useState, useEffect, useCallBack } from 'react';\nimport { Grid, Card, Dimmer, Segment, Image, GridColumn } from 'semantic-ui-react';\n\nimport './Show.css';\n\nexport default function ShowPage({ loggedUser, handleLogout }) {\n    const [post, setPost] = useState({});\n    const { id } = useParams();\n\n    async function getOne() {\n        try {\n            const response = await postsApi.showPost(id);\n            console.log(response, '<<<Data');\n            setPost(response.data);\n            // setLoading(false);\n        } catch (err) {\n            console.log(err.message, '<<< This is the error');\n        }\n    }\n\n    useEffect(() => {\n        getOne();\n    }, [])\n\n    async function handleAddComment(comment) {\n        try {\n            const response = await commentsApi.create(comment);\n            getOne();\n        } catch (err) {\n            console.log(err.message, 'error creating post');\n        }\n    }\n\n    return (\n        // <>\n        // <Header handleLogout={handleLogout} loggedUser={loggedUser}/>\n        //     <h2>test</h2>\n        //     <Image src={post.photoUrl}/>\n        //     <span>{post.title}</span>\n        //     <AddComment postId={post._id} handleAddComment={handleAddComment}/>\n        //     <CommentList comments={post.comments}/>\n\n        // </>\n\n\n        <Grid textAlign='center' columns={1} >\n            <Grid.Row>\n                <Grid.Column>\n                    <Header loggedUser={loggedUser} handleLogout={handleLogout} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row >\n                <Grid.Column>\n                    <h1>{post.title}</h1>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Image className='image' src={post.photoUrl} />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <AddComment postId={post._id} handleAddComment={handleAddComment} />\n                </Grid.Column>\n                <Grid.Column>\n                    <CommentList className={'list'} comments={post.comments} />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Feed from '../Feed/Feed'\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport ProfilePage from '../Profile/Profile';\nimport Show from '../Show/Show'\nimport userService from \"../../utils/userService\";\n\n\n\nfunction App() {\n    const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n    // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n    // this  const token = createJWT(user); // where user was the document we created from mongo\n    // console.log(user)\n    function handleSignUpOrLogin() {\n        setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n    }\n\n    function handleLogout() {\n        userService.logout();\n        setUser(null);\n    }\n\n\n    if (user) {\n        // if the user is logged in\n        return (\n            <Routes>\n                <Route path=\"/\" element={<Feed loggedUser={user} handleLogout={handleLogout} />} />\n                <Route path=\"/login\" element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />} />\n                <Route path=\"/signup\" element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />} />\n                <Route path='/:username' element={<ProfilePage  loggedUser={user} handleLogout={handleLogout} />} />\n                <Route path='/post/:id' element={<Show loggedUser={user} handleLogout={handleLogout} />} />\n            </Routes>\n        );\n    }\n\n    return (\n        // if the user is not logged in\n        <Routes>\n            <Route\n                path=\"/login\"\n                element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n            />\n            <Route\n                path=\"/signup\"\n                element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n            />\n            <Route path=\"/*\" element={<Navigate to=\"/signup\" />} />\n        </Routes>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router><App /></Router>,\n    document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}